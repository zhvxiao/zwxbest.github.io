<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>svn分支合并到主干</title>
      <link href="/2018/05/17/svn%E5%88%86%E6%94%AF%E5%90%88%E5%B9%B6%E5%88%B0%E4%B8%BB%E5%B9%B2/"/>
      <url>/2018/05/17/svn%E5%88%86%E6%94%AF%E5%90%88%E5%B9%B6%E5%88%B0%E4%B8%BB%E5%B9%B2/</url>
      <content type="html"><![CDATA[<h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>有时会在分支做一些实验性或者重构性的工作。<br>百度了，写的乱七八糟，svn右键我就没找到reintegrate这个功能选项。<br>百度第一页没搞定就直接谷歌了，通常前三条，基本上第一条就搞定。</p><h3 id="参考来源"><a href="#参考来源" class="headerlink" title="参考来源"></a>参考来源</h3><p><a href="https://stackoverflow.com/questions/7563693/merge-a-branch-into-trunk" target="_blank" rel="noopener">Merge a Branch into Trunk</a></p><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><p>svn merge –reintegrate ^/project/branches/branch_1</p><p>一行搞定，冲突放到小乌龟或者idea中处理，处理完成运行一遍项目没问题提交到主干。</p><p>关于那个^(caret)，因为是特殊符号，应该用caret查。</p><p><a href="http://svnbook.red-bean.com/en/1.6/svn.basic.in-action.html" target="_blank" rel="noopener">http://svnbook.red-bean.com/en/1.6/svn.basic.in-action.html</a></p><p>代表svn仓库的根目录</p>]]></content>
      
      <categories>
          
          <category> 版本控制 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> svn </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>apply用法</title>
      <link href="/2018/05/15/apply%E7%94%A8%E6%B3%95/"/>
      <url>/2018/05/15/apply%E7%94%A8%E6%B3%95/</url>
      <content type="html"><![CDATA[<pre><code>/** * Created by zhangweixiao on 2018/5/14. */// 1.改变this指向    var obj1={        name:&#39;seven&#39;    };    var obj2={        name:&#39;anne&#39;    };global.name=&#39;global&#39;;var getName=function () {    console.log(this.name);};getName();//globalgetName.call(obj1);//sevengetName.call(obj2);//anne//function.prototype.bindFunction.prototype.bind=function (context) {//context表示obj    var self=this;//保存this引用，否则就变成去全局了。    return function () {        console.log(this);        return self.apply(context,arguments);//self指向=function () {console.log(this.name);}    }};var obj={name:&#39;seven&#39;};var func=function () {    console.log(this.name);    console.log(arguments);}.bind(obj);func(11,22);Function.prototype.bind=function () {    var self=this,//保存原函数        context=[].shift.call(arguments),//获取第一个参数        args=[].slice.call(arguments);//剩余参数转换成数组    return function () {        //组合两次的参数作为新参数        return self.apply(context,[].concat.call(args,[].slice.call(arguments)));    }};var obj={    name:&#39;svene&#39;};var func=function (a,b,c,d) {    console.log(this.name);    console.log([a,b,c,d]);}.bind(obj,1,2);func(3,4);//3 借用其他对象的方法var A=function (name) {    this.name=name;};var B=function () {    A.apply(this,arguments);};B.prototype.getName=function () {    return this.name;};var b=new B(&#39;seven&#39;);console.log(b.getName());(function () {        Array.prototype.push.call(arguments,3);        console.log(arguments);    })(1,2);var a={};Array.prototype.push.call(a,&#39;first&#39;);console.log(a.length);console.log(a[0]);</code></pre>]]></content>
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> apply </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js中的this</title>
      <link href="/2018/05/14/js%E4%B8%AD%E7%9A%84this/"/>
      <url>/2018/05/14/js%E4%B8%AD%E7%9A%84this/</url>
      <content type="html"><![CDATA[<pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;div1&quot;&gt;    好想家&lt;/div&gt;&lt;div id=&quot;div2&quot;&gt;    你走吧&lt;/div&gt;&lt;/body&gt;&lt;script&gt;    window.id=&quot;windo    w_id&quot;;    document.getElementById(&quot;div1&quot;).onclick=function () {        this.id=&quot;div11&quot;;        alert(this.id);        var callback=function () {            alert(this.id);        };        //只要赋值给普通函数，this就指向global        callback();    };    document.getElementById(&quot;div2&quot;).onclick=function () {        var that=this;        var callback=function () {            alert(that.id);        };        //只要赋值给普通函数，this就指向global        callback();    };    document.getElementById= (function (func) {        return function () {            return func.apply(document,arguments);        }    })(document.getElementById);    var getId=document.getElementById;    alert(getId(&quot;div1&quot;).id);&lt;/script&gt;&lt;/html&gt;/** * Created by zhangweixiao on 2018/5/13. *//*//1.作为对象的方法调用var obj={    a:1,    getA:function () {        console.log(this==obj);        console.log(this.a);    }};//true//1obj.getA();*///——————————————————————————————————//1.5 测试作用于// global.name=&quot;globalName&quot;;// name=&quot;name&quot;;// var name=&quot;varName&quot;;// console.log(name);//——————————————————————————————————// //2 作为普通函数调用// //1和2一样，3不一样// global.name=&#39;globalName&#39;;// //不适用// name=&#39;globalName1&#39;;  // var name=&#39;partialName&#39;;// var getName=function () {//     return this.name;// };// //globalName// console.log(getName());//// var myObject={//     name:&#39;seven&#39;,//     getName:function () {//         return this.name;//     }// };// var getName=myObject.getName;// console.log(getName());//——————————————————————————————————/*//3.在构造器中调用var myClass=function () {    this.name=&#39;seven&#39;;};var obj=new myClass();console.log(obj.name);*///——————————————————————————————————/*//4 function.prototype.call或者apply调用var obj1={    name:&#39;zhangweixiao&#39;,    getName:function () {        return this.name;    }};var obj2={    name:&#39;anne&#39;};console.log(obj1.getName());console.log(obj1.getName.call(obj2));*///——————————————————————————————————</code></pre>]]></content>
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>hexo常用操作大全</title>
      <link href="/2018/05/12/hexo%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E5%A4%A7%E5%85%A8/"/>
      <url>/2018/05/12/hexo%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E5%A4%A7%E5%85%A8/</url>
      <content type="html"><![CDATA[<h3 id="添加图片"><a href="#添加图片" class="headerlink" title="添加图片"></a>添加图片</h3><p>好像需要hexo3以上,hexo -v查看。</p><ol><li><p>post_asset_folder: true</p></li><li><p>hexo new post “hexo常用操作大全” ,和之前创建文章一样,不过之后会在同级目录下创建一个”hexo常用操作大全”的目录,用来存放图片.</p></li><li><blockquote></blockquote><blockquote><p><code></code></p></blockquote></li></ol>]]></content>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> [object Object] </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>编程语言和工具的吉祥物们</title>
      <link href="/2018/05/12/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E5%92%8C%E5%B7%A5%E5%85%B7%E7%9A%84%E5%90%89%E7%A5%A5%E7%89%A9%E4%BB%AC/"/>
      <url>/2018/05/12/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E5%92%8C%E5%B7%A5%E5%85%B7%E7%9A%84%E5%90%89%E7%A5%A5%E7%89%A9%E4%BB%AC/</url>
      <content type="html"><![CDATA[<p>觉得go的吉祥物很可爱,所以搜集了一下常用的编程语言和软件工具的吉祥物和logo,有些比较大众的就不放上来了。</p><p>如果还有其他有趣的吉祥物或者logo,可以留言。</p><p>不定时更新。</p><h2 id="编程语言"><a href="#编程语言" class="headerlink" title="编程语言"></a>编程语言</h2><h3 id="php"><a href="#php" class="headerlink" title="php"></a>php</h3><img src="/2018/05/12/编程语言和工具的吉祥物们/php.jpg" title="php"><h3 id="go"><a href="#go" class="headerlink" title="go"></a>go</h3><img src="/2018/05/12/编程语言和工具的吉祥物们/go.jpg" title="go"><h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><img src="/2018/05/12/编程语言和工具的吉祥物们/python.jpg" title="python"><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><img src="/2018/05/12/编程语言和工具的吉祥物们/java.jpg" title="java"><h3 id="lisp"><a href="#lisp" class="headerlink" title="lisp"></a>lisp</h3><img src="/2018/05/12/编程语言和工具的吉祥物们/lisp.jpg" title="lisp"><h3 id="node-js"><a href="#node-js" class="headerlink" title="node.js"></a>node.js</h3><img src="/2018/05/12/编程语言和工具的吉祥物们/node.js.jpg" title="node.js"><h3 id="perl"><a href="#perl" class="headerlink" title="perl"></a>perl</h3><img src="/2018/05/12/编程语言和工具的吉祥物们/perl.jpg" title="perl"><h3 id="ruby"><a href="#ruby" class="headerlink" title="ruby"></a>ruby</h3><img src="/2018/05/12/编程语言和工具的吉祥物们/ruby.jpg" title="ruby"><h3 id="rust"><a href="#rust" class="headerlink" title="rust"></a>rust</h3><img src="/2018/05/12/编程语言和工具的吉祥物们/rust.jpg" title="rust"><h3 id="ada"><a href="#ada" class="headerlink" title="ada"></a>ada</h3><img src="/2018/05/12/编程语言和工具的吉祥物们/ada.jpg" title="ada"><h2 id="常用软件"><a href="#常用软件" class="headerlink" title="常用软件"></a>常用软件</h2><h3 id="tomcat"><a href="#tomcat" class="headerlink" title="tomcat"></a>tomcat</h3><img src="/2018/05/12/编程语言和工具的吉祥物们/tomcat.jpg" title="tomat"><h3 id="github"><a href="#github" class="headerlink" title="github"></a>github</h3><img src="/2018/05/12/编程语言和工具的吉祥物们/github.jpg" title="github"><h3 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h3><img src="/2018/05/12/编程语言和工具的吉祥物们/docker.jpg" title="docker"><h3 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h3><img src="/2018/05/12/编程语言和工具的吉祥物们/mysql.jpg" title="mysql"><h3 id="postgresql"><a href="#postgresql" class="headerlink" title="postgresql"></a>postgresql</h3><img src="/2018/05/12/编程语言和工具的吉祥物们/postgresql.jpg" title="postgresql"><h3 id="llvm"><a href="#llvm" class="headerlink" title="llvm"></a>llvm</h3><img src="/2018/05/12/编程语言和工具的吉祥物们/llvm.jpg" title="llvm"><h3 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h3><img src="/2018/05/12/编程语言和工具的吉祥物们/redis.jpg" title="redis">]]></content>
      
      
        <tags>
            
            <tag> 有趣 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>设计一个有getMain功能的栈</title>
      <link href="/2018/05/11/%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E6%9C%89getMain%E5%8A%9F%E8%83%BD%E7%9A%84%E6%A0%88/"/>
      <url>/2018/05/11/%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E6%9C%89getMain%E5%8A%9F%E8%83%BD%E7%9A%84%E6%A0%88/</url>
      <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>实现一个栈,有压入、弹出功能,还要有返回当前最小值的功能。</p><h3 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h3><p>1.pop、push、getMain时间复杂度均为O（1）</p><p>2.可以使用现成的栈结构</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><a href="https://github.com/zwxbest/algorithm/tree/master/%E7%A8%8B%E5%BA%8F%E5%91%98%E9%9D%A2%E8%AF%95%E6%8C%87%E5%8D%97-%E7%AE%97%E6%B3%95/%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E6%9C%89getMin%E5%8A%9F%E8%83%BD%E7%9A%84%E6%A0%88/src/GetMinStack" title="设计一个有getMain功能的栈" target="_blank" rel="noopener">设计一个有getMain功能的栈</a></p>]]></content>
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vim常用操作大全</title>
      <link href="/2018/05/11/vim%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E5%A4%A7%E5%85%A8/"/>
      <url>/2018/05/11/vim%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E5%A4%A7%E5%85%A8/</url>
      <content type="html"><![CDATA[<h3 id="复制粘贴"><a href="#复制粘贴" class="headerlink" title="复制粘贴"></a>复制粘贴</h3><pre><code>&quot;+d --剪切&quot;+p --粘贴&quot;+y --复制</code></pre><p>“（引号）用来选择寄存器,+代表系统剪贴板</p><pre><code>yh --复制左边的一个字符yj --复制下一行yk --复制上一行yl --复制当前字符</code></pre><h3 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h3><pre><code>w --向右跳转一个单词b --向左跳转一个单词</code></pre><h3 id="撤销和反撤销"><a href="#撤销和反撤销" class="headerlink" title="撤销和反撤销"></a>撤销和反撤销</h3><pre><code>u 撤销ctrl+r 反撤销</code></pre>]]></content>
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>通过文本为pdf添加书签</title>
      <link href="/2018/05/09/%E9%80%9A%E8%BF%87%E6%96%87%E6%9C%AC%E4%B8%BApdf%E6%B7%BB%E5%8A%A0%E4%B9%A6%E7%AD%BE/"/>
      <url>/2018/05/09/%E9%80%9A%E8%BF%87%E6%96%87%E6%9C%AC%E4%B8%BApdf%E6%B7%BB%E5%8A%A0%E4%B9%A6%E7%AD%BE/</url>
      <content type="html"><![CDATA[<h1 id="pmark"><a href="#pmark" class="headerlink" title="pmark"></a>pmark</h1><p>pdf书签生成工具和编辑工具。</p><p><a href="https://github.com/zwxbest/pmark" target="_blank" rel="noopener">github地址</a></p><p>个人收集了不少pdf，有的没有书签，不能跳页不方便。<br>有的书签每次跳页会把缩放页面。</p><p>针对这两个最常用的需求，实现一个简单的功能。</p><p>不想学javaFx，不喜欢 .net, (从wpf一路被微软坑的过来人)。考虑之后用springboot做一个内嵌tomcat的web页面。</p><p>复制当当或者亚马逊或者京东或者豆瓣的书签内容到txt中，即可为pdf生成书签。书签有层级，可跳转页码。<br>编辑全部书签可让书签跳转时不会缩放，即按照档当前的缩放比例。</p><p>此操作会删除已存在的书签，并新增书签，但不会对pdf中的文字和图形注释以及其他的产生影响。</p><p>提交后会在pdf同级目录生成一个XX-带书签.pdf的文件，为处理完成后的pdf文件。</p><h2 id="操作方法"><a href="#操作方法" class="headerlink" title="操作方法"></a>操作方法</h2><p>如图</p><img src="/2018/05/09/通过文本为pdf添加书签/web.jpg" title="pmarker"><p>处理之后</p><img src="/2018/05/09/通过文本为pdf添加书签/pdf.jpg" title="pdf"><ol><li>页码偏移：pdf文件从封面就开始计算页码，而目录页码是书上标的页码。偏移即差值</li><li>路径：pdf的绝对路径</li><li>书签文本：从上面说的网站粘贴过来</li><li>书签格式：{no}-数字序号，{content}- 内容,{page}-页码,不需要指定空格，每行代表一个层级，制作折叠书签。<br>注意{no}和{page}只包含数字，{content}表示除了no外要在书签中显示的内容<br>比如：传播过度的社会　/9 。这里没有序号，有页码，但是不希望书签中包含/，即定义格式{content}/{page}</li></ol><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><pre><code>java -jar pmark-0.0.1-SNAPSHOT.jar</code></pre><h2 id="待改进"><a href="#待改进" class="headerlink" title="待改进"></a>待改进</h2><ul><li style="list-style: none"><input type="checkbox"> 页面，要美，可是，好累。</li><li style="list-style: none"><input type="checkbox"> 整理出大量pdf书签格式表达式，先是自动识别格式位符定义格式。</li><li style="list-style: none"><input type="checkbox"> 爬虫抓取以上网站并让用户选择正确或者详细的那个，使用语言初步定为node.js。</li></ul>]]></content>
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iText </tag>
            
            <tag> PDFBox </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
